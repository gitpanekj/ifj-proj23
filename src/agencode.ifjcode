.IFJcode23
JUMP main

LABEL readString  #////////////////// readString ///////////////////
PUSHFRAME

DEFVAR LF@result
READ LF@result string

POPFRAME
RETURN

LABEL readDouble  #////////////////// readDouble ///////////////////
PUSHFRAME

DEFVAR LF@result
READ LF@result float

POPFRAME
RETURN

LABEL readInt  #////////////////// readInt ///////////////////
PUSHFRAME

DEFVAR LF@result
READ LF@result int

POPFRAME
RETURN

LABEL write  #////////////////// write
PUSHFRAME 
                    #// nějak projet vstupy, může jich být neomezně, ale ne tady
                    #if (LF@_1 == "nil") write "";
WRITE LF@_1
WRITE string@\010   # tohle pak pryč?

POPFRAME
RETURN


LABEL int2Double  #////////////////// int2Double ///////////////////
PUSHFRAME

DEFVAR LF@result
INT2FLOAT LF@result LF@_1

POPFRAME
RETURN

LABEL double2Int  #////////////////// double2Int ///////////////////
PUSHFRAME

DEFVAR LF@result
FLOAT2INT LF@result LF@_1

POPFRAME
RETURN

LABEL length  #////////////////// length ///////////////////
PUSHFRAME

DEFVAR LF@result

STRLEN LF@result LF@_1

POPFRAME
RETURN

LABEL substring  #////////////////// substring ///////////////////
PUSHFRAME

#  1 string
#  2 start
#  3 end before

DEFVAR LF@result
DEFVAR LF@if
DEFVAR LF@length
DEFVAR LF@tempChar
DEFVAR LF@index

MOVE LF@index int@0                         # index vysledku na 0

LT LF@if LF@_2 int@0                        # start < 0
JUMPIFEQ substringError LF@if bool@true
LT LF@if LF@_3 int@0                        # end < 0
JUMPIFEQ substringError LF@if bool@true
GT LF@if LF@_2 LF@_3                        # start > end
JUMPIFEQ substringError LF@if bool@true

CREATEFRAME
DEFVAR TF@_1
MOVE TF@_1 LF@_1
CALL length
move LF@length TF@result

GT LF@if LF@_3 LF@length                    # end > length
JUMPIFEQ substringError LF@if bool@true
GT LF@if LF@_2 LF@length                    # start > length
JUMPIFEQ substringError LF@if bool@true
EQ LF@if LF@_2 LF@length                    # start == length
JUMPIFEQ substringError LF@if bool@true

MOVE LF@result string@

LABEL substringLoop
GETCHAR LF@tempChar LF@_1 LF@_2
CONCAT LF@result LF@result LF@tempChar

ADD LF@_2 LF@_2 int@1
ADD LF@index LF@index int@1

EQ LF@if LF@_2 LF@_3
JUMPIFEQ substringEnd LF@if bool@true
JUMP substringLoop

LABEL substringError
move LF@result nil@nil

LABEL substringEnd

POPFRAME
RETURN

LABEL ord  #////////////////// ord ///////////////////
PUSHFRAME

DEFVAR LF@result
DEFVAR LF@length

CREATEFRAME
DEFVAR TF@_1
MOVE TF@_1 LF@_1
CALL length
MOVE LF@length TF@result

JUMPIFEQ ordEnd0 LF@length int@0

STRI2INT LF@result LF@_1 int@0
JUMP ordEnd

LABEL ordEnd0
MOVE LF@result int@0

LABEL ordEnd

POPFRAME
RETURN

LABEL chr  #////////////////// chr ///////////////////
PUSHFRAME

DEFVAR LF@result
INT2CHAR LF@result LF@_1

POPFRAME
RETURN






















LABEL main       #//////////////////////// MAIN ///////////////////////////
CREATEFRAME




CREATEFRAME
CALL readDouble

JUMPIFEQ endError TF@result nil@nil

DEFVAR GF@text
MOVE GF@text TF@result

CREATEFRAME
DEFVAR TF@_1
MOVE TF@_1 GF@text 
CALL double2Int

MOVE GF@text TF@result

CREATEFRAME
DEFVAR TF@_1
MOVE TF@_1 GF@text 
CALL write

CREATEFRAME
DEFVAR TF@_1
MOVE TF@_1 string@prvni
CALL write



JUMP end

LABEL endError

CREATEFRAME
DEFVAR TF@_1
MOVE TF@_1 string@spatne
CALL write




LABEL end 



#use CREATEFRAME before function
#use PUSHFRAME at the start of function
#use POPFRAME at the end of function